from cryptography.fernet import Fernet
# The fernet module of the cryptography package
# has inbuilt functions for the generation of the key,
# encryption of plaintext into ciphertext, and decryption
# of ciphertext into plaintext using the encrypt and decrypt
# methods respectively. The fernet module guarantees that data
# encrypted using it cannot be further manipulated or read
# without the key.
from tkinter import *
from PIL import ImageTk,Image
import tkinter.messagebox
import sqlite3
from string import *
from random import *
from datetime import date
from cv2 import (VideoCapture,resize,imshow, waitKey, destroyWindow, INTER_AREA,imwrite)
from  tkinter import ttk

with open("key.txt") as f:
    for line in f:
        key = line
        
key = key.encode('utf-8')
#print(type(key))
f_obj = Fernet(key)

def de_code(someData):
    return f_obj.decrypt(someData).decode()

def log():    
    login = Tk()
    login.title("Banking Application")
    login.geometry("1200x700")
    l = Label(login, text="SECURED BANK")
    l.place(x=100,y=50)
    l.config(font=('Helvetica',30,'bold'))
    img0 = ImageTk.PhotoImage(Image.open('banklogo.JPG'))
    label_1 = Label(login, image = img0)
    label_1.place(x=200,y=150)
    img1 = ImageTk.PhotoImage(Image.open('loginlogo.JPG'))
    l1 = Label(login, image = img1)
    l1.place(x=850,y=150)
    l2 = Label(login, text="Username")
    l2.place(x=850,y=250)
    l2.config(font=(15))
    e1=Entry(login,font=('calibri',15))
    e1.place(x=850,y=280,width=280,height=30)
    l3=Label(login,text="Password")
    l3.place(x=850,y=320)
    l3.config(font=(15))
    e2=Entry(login,font=('calibri',15),show='*')
    e2.place(x=850,y=350,width=280,height=30)
    def dash(username):
        bank=Tk()
        bank.geometry("1000x700")
        bank.title('Dashboard')
        row=con.execute("select * from bank_details")
        for data in row:
            if username==str(de_code(data[0])):
                user_photo = str(de_code(data[13]))+'.png'
                img0 = ImageTk.PhotoImage(Image.open(user_photo))
                label_1 = Label(bank, image = img0)
                label_1.place(x=100,y=50)
                l1=Label(bank,text='My Account')
                l1.place(x=300,y=100)
                l1.config(font=('Helvetica',30,'bold'))
                l2=Label(bank,text="Full Name")
                l2.place(x=100,y=200)
                l2.config(font=(15))
                e0=Label(bank,text=str(de_code(data[2])))
                e0.place(x=100,y=250)
                e0.config(font=(15),bg='white',width=30)
                l3=Label(bank,text='Account No.')
                l3.place(x=100,y=300)
                l3.config(font=(15))
                e_2=Label(bank,text=str(de_code(data[13])))
                e_2.place(x=100,y=350)
                e_2.config(font=(15),bg='white',width=30)
                l4=Label(bank,text="Balance")
                l4.place(x=100,y=400)
                l4.config(font=(15))
                e3=Label(bank,text=str(de_code(data[14])))
                e3.place(x=100,y=450)
                e3.config(font=(15),bg='white',width=30)
                l5=Label(bank,text="Email ID")
                l5.place(x=100,y=500)
                l5.config(font=(15))
                e4=Label(bank,text=str(de_code(data[3])))
                e4.place(x=100,y=550)
                e4.config(font=(15),bg='white',width=30)
                l6=Label(bank,text="Gender")
                l6.place(x=500,y=200)
                l6.config(font=(15))
                e5=Label(bank,text=str(de_code(data[6])))
                e5.place(x=500,y=250)
                e5.config(font=(15),bg='white',width=30)
                l7=Label(bank,text="City")
                l7.place(x=500,y=300)
                l7.config(font=(15))
                e6=Label(bank,text=str(de_code(data[5])))
                e6.place(x=500,y=350)
                e6.config(font=(15),bg='white',width=30)
                l8=Label(bank,text="Date of birth")
                l8.place(x=500,y=400)
                l8.config(font=(15))
                dob=str(de_code(data[7]))+"/"+str(de_code(data[8]))+"/"+str(de_code(data[9]))
                e7=Label(bank,text=dob)
                e7.place(x=500,y=450)
                e7.config(font=(15),bg='white',width=30)
                l9=Label(bank,text="Mobile")
                l9.place(x=500,y=500)
                l9.config(font=(15))
                e8=Label(bank,text=str(de_code(data[4])))
                e8.place(x=500,y=550)
                e8.config(font=(15),bg='white',width=30)
                def withdraw():           
                    bank.destroy()
                    wit=Tk()
                    wit.geometry('1000x700')
                    wit.title('withdraw window')
                    l0=Label(wit,text='withdraw')
                    l0.place(x=100,y=100)
                    l0.config(font=('Helvetica',30,'bold'))
                    l1=Label(wit,text="Account No.")
                    l1.place(x=100,y=200)
                    l1.config(font=(15))
                    e1=Label(wit,text=str(de_code(data[13])))
                    e1.place(x=100,y=250)
                    e1.config(font=(15),bg='white',width=30)
                    l2=Label(wit,text="Enter amount to be withdrawn")
                    l2.place(x=100,y=300)
                    l2.config(font=(15))
                    e2=Entry(wit)
                    e2.place(x=100,y=350,width=275,height=30)
                    l3=Label(wit,text="Note")
                    l3.place(x=100,y=400)
                    l3.config(font=(15))
                    e3=Entry(wit)
                    e3.place(x=100,y=450,width=275,height=30)
                    tran=randint(100000000000,999999999999)
                    def w():
                        ba=eval(e2.get())
                        bal=float(de_code(data[14]))-ba
                        if bal<=1000:
                            tkinter.messagebox.showwarning("Warning","Balance insufficient")
                            e2.delete(0,END)
                        else:
                            up="update bank_details set Balance =? where Account_no =?"
                            ans=(f_obj.encrypt(str(bal).encode()),data[13])
                            con.execute(up,ans)
                            con.commit()
                            wit.destroy()
                            query1="insert into logs(Date,Transaction_id,Account_no,Balance,Note) values(?,?,?,?,?)"
                            ans1=(f_obj.encrypt(str(date.today()).encode()),f_obj.encrypt(str(tran).encode()),data[13],f_obj.encrypt(str(bal).encode()),f_obj.encrypt("Withdraw".encode()))
                            con1.execute(query1,ans1)
                            con1.commit()
                            dash(username)
                    b=Button(wit,text='Enter',width=10,command=w)
                    b.place(x=150,y=500) 
                    b.config(font=(50))
                    def exit_wit():
                        wit.destroy()
                        dash(username)
                    b2=Button(wit,text='Exit',width=10,command=exit_wit)
                    b2.place(x=150,y=550)
                    b2.config(font=(50))
                    wit.mainloop()
                b0=Button(bank,text='Withdraw',width=30,command=withdraw)
                b0.place(x=900,y=150)
                b0.config(font=(50))
                def deposit():           
                    bank.destroy()
                    dep=Tk()
                    dep.geometry('1000x700')
                    dep.title('Deposit window')
                    l0=Label(dep,text='Deposit')
                    l0.place(x=100,y=100)
                    l0.config(font=('Helvetica',30,'bold'))
                    l1=Label(dep,text="Account No.")
                    l1.place(x=100,y=200)
                    l1.config(font=(15))
                    e1=Label(dep,text=str(de_code(data[13])))
                    e1.place(x=100,y=250)
                    e1.config(font=(15),bg='white',width=30)
                    l2=Label(dep,text="Enter amount to be deposited")
                    l2.place(x=100,y=300)
                    l2.config(font=(15))
                    e2=Entry(dep)
                    e2.place(x=100,y=350,width=275,height=30)
                    l3=Label(dep,text="Note")
                    l3.place(x=100,y=400)
                    l3.config(font=(15))
                    e3=Entry(dep)
                    e3.place(x=100,y=450,width=275,height=30)
                    tran=randint(100000000000,999999999999)
                    def e():
                        ba=eval(e2.get())
                        bal=float(de_code(data[14]))+ba
                        up="update bank_details set Balance =? where Account_no =?"
                        ans=(f_obj.encrypt(str(bal).encode()),data[13])
                        con.execute(up,ans)
                        con.commit()
                        dep.destroy()
                        query1="insert into logs(Date,Transaction_id,Account_no,Balance,Note) values(?,?,?,?,?)"
                        ans1=(f_obj.encrypt(str(date.today()).encode()),f_obj.encrypt(str(tran).encode()),data[13],f_obj.encrypt(str(bal).encode()),f_obj.encrypt("Deposit".encode()))
                        con1.execute(query1,ans1)
                        con1.commit()
                        dash(username)
                    b=Button(dep,text='Enter',width=10,command=e)
                    b.place(x=150,y=500) 
                    b.config(font=(50))
                    def exit_dep():
                        dep.destroy()
                        dash(username)
                    b2=Button(dep,text='Exit',width=10,command=exit_dep)
                    b2.place(x=150,y=550)
                    b2.config(font=(50))
                    dep.mainloop()
                b1=Button(bank,text='Deposit',width=30,command=deposit)
                b1.place(x=900,y=250)
                b1.config(font=(50))
                def money():
                    bank.destroy()
                    mon=Tk()
                    mon.title('Money transaction page')
                    mon.geometry('1000x700')
                    l0=Label(mon,text="Transaction")
                    l0.place(x=100,y=50)
                    l0.config(font=('Helvetica',30,'bold'))
                    l1=Label(mon,text="Your account number")
                    l1.place(x=100,y=150)
                    l1.config(font=(15))
                    e1=Label(mon,text=str(de_code(data[13])))
                    e1.place(x=300,y=150)
                    e1.config(font=(15),bg='white',width=30)
                    l2=Label(mon,text="Recipient account number")
                    l2.place(x=100,y=200)
                    l2.config(font=(15))
                    e2=Entry(mon)
                    e2.place(x=300,y=200,width=275,height=30)
                    l3=Label(mon,text="Amount")
                    l3.place(x=100,y=250)
                    l3.config(font=(15))
                    e3=Entry(mon)
                    e3.place(x=300,y=250,width=275,height=30)
                    l4=Label(mon,text="Security pin")
                    l4.place(x=100,y=300)
                    l4.config(font=(15))
                    e4=Entry(mon)
                    e4.place(x=300,y=300,width=275,height=30)
                    tran=randint(100000000000,999999999999)
                    def transfer():
                        if float(de_code(data[14]))-float(e3.get())<=1000:
                           tkinter.messagebox.showwarning("Warning","Balance insufficient")
                           e3.delete(0,END)
                        else:
                            row=con.execute("select * from bank_details")
                            secu=int(de_code(data[19]))
                            flag=1
                            for data2 in row:
                                if int(e2.get())==int(de_code(data2[13])) and int(e4.get())==secu:
                                    flag=0
                                    tkinter.messagebox.showinfo("Success","Transaction success")
                                    ba=eval(e3.get())
                                    bal=float(de_code(data2[14]))+ba
                                    up="update bank_details set Balance =? where Account_no =?"
                                    ans=(f_obj.encrypt(str(bal).encode()),data2[13])
                                    con.execute(up,ans)
                                    con.commit()
                                    query1="insert into logs(Date,Transaction_id,Account_no,Balance,Note) values(?,?,?,?,?)"
                                    ans1=(f_obj.encrypt(str(date.today()).encode()),f_obj.encrypt(str(tran).encode()),data2[13],f_obj.encrypt(str(bal).encode()),f_obj.encrypt("Credit".encode()))
                                    con1.execute(query1,ans1)
                                    con1.commit()
                                elif int(e2.get())==int(de_code(data2[13])) and int(e4.get())!=int(de_code(data2[19])):
                                    flag=2
                            if flag==1:
                                tkinter.messagebox.showwarning("Warning","Recipient account doesn't exist")
                                e2.delete(0,END)
                            elif flag==2:
                                tkinter.messagebox.showwarning("Warning","Incorrect Security Pin")
                                mon.destroy()
                                dash(username)
                            else:
                                row=con.execute("select * from bank_details where account_no=?",[data[13]])
                                for data1 in row:
                                    ba=eval(e3.get())
                                    bal=float(de_code(data1[14]))-ba
                                    up="update bank_details set Balance =? where Account_no =?"
                                    ans=(f_obj.encrypt(str(bal).encode()),data1[13])
                                    con.execute(up,ans)
                                    con.commit()
                                    mon.destroy()
                                    query1="insert into logs(Date,Transaction_id,Account_no,Balance,Note) values(?,?,?,?,?)"
                                    ans1=(f_obj.encrypt(str(date.today()).encode()),f_obj.encrypt(str(tran).encode()),data1[13],f_obj.encrypt(str(bal).encode()),f_obj.encrypt("Fund transfer".encode()))
                                    con1.execute(query1,ans1)
                                    con1.commit()
                                    dash(username)                      
                    b1=Button(mon,text='Transfer',command=transfer)
                    b1.place(x=250,y=400)
                    b1.config(font=(50))
                    def exit_fund():
                        mon.destroy()
                        dash(username)
                    b2=Button(mon,text='Exit',width=10,command=exit_fund)
                    b2.place(x=250,y=450)
                    b2.config(font=(50))
                    mon.mainloop()
                b2=Button(bank,text='Fund Transfer',width=30,command=money)
                b2.place(x=900,y=350)
                b2.config(font=(50))
                def deb():
                    bank.destroy()
                    de=Tk()
                    de.geometry("1000x700")
                    de.title('Debit card services')
                    l0=Label(de,text="Debit card")
                    l0.place(x=100,y=100)
                    l0.config(font=('Helvetica',30,'bold'))
                    l1=Label(de,text="Debit card number")
                    l1.place(x=100,y=200)
                    l1.config(font=(15))
                    e1=Label(de,text=str(de_code(data[15])))
                    e1.place(x=100,y=250)
                    e1.config(font=(15),bg='white',width=30)
                    l2=Label(de,text="Card limit")
                    l2.place(x=100,y=300)
                    l2.config(font=(15))
                    e2=Entry(de)
                    e2.place(x=100,y=350,width=275,height=30)
                    lim=str(de_code(data[18]))
                    e2.insert(0,lim)
                    def unblo():
                        u=Tk()
                        u.title('Block card')
                        u.geometry('300x200')
                        li=Label(u,text='Enter security pin')
                        li.place(x=50,y=50)
                        li.config(font=(25))
                        e21=Entry(u,show='*')
                        e21.place(x=80,y=100)
                        def un():
                            if e21.get()==str(de_code(data[19])):
                                u.destroy()
                                up1="update bank_details set status =? where Account_no =?"
                                ans1=(f_obj.encrypt('unblock'.encode()),data[13])
                                con.execute(up1,ans1)
                                con.commit()
                                tkinter.messagebox.showinfo("Unblocked","Your Debit card has been unblocked")
                                b4=Button(de,text='Block',command=blo,width=30)
                                b4.place(x=150,y=400)
                                b4.config(font=(20))
                            else:
                                 tkinter.messagebox.showwarning("Warning","Incorrect password")
                                 u.destroy()
                        b5=Button(u,text='Enter',command=un)
                        b5.place(x=130,y=150)
                        b5.config(font=(50))
                    def blo():
                        b=Tk()
                        b.title('Block card')
                        b.geometry('300x200')
                        li1=Label(b,text='Enter security pin')
                        li1.place(x=50,y=50)
                        li1.config(font=(25))
                        e20=Entry(b,show='*')
                        e20.place(x=80,y=100)
                        def bl():
                            if e20.get()==str(de_code(data[19])):
                                b.destroy()
                                up2="update bank_details set status =? where Account_no =?"
                                ans2=(f_obj.encrypt('block'.encode()),data[13])
                                con.execute(up2,ans2)
                                con.commit()
                                tkinter.messagebox.showinfo("Blocked","Your Debit card has been blocked")
                                b3=Button(de,text='Unblock',command=unblo,width=30)
                                b3.place(x=150,y=400)
                                b3.config(font=(20))
                            else:
                                 tkinter.messagebox.showwarning("Warning","Incorrect password")
                                 b.destroy()
                        b6=Button(b,text='Enter',command=bl)
                        b6.place(x=130,y=150)
                        b6.config(font=(50))
                    if str(de_code(data[17])) =="unblock":
                        b1=Button(de,text='Block',command=blo,width=30)
                        b1.place(x=150,y=400)
                        b1.config(font=(20))
                    elif str(de_code(data[17]))=='block':
                        b2=Button(de,text='Unblock',command=unblo,width=30)
                        b2.place(x=150,y=400)
                        b2.config(font=(20))
                    def exit1():
                        de.destroy()
                        dash(username)
                    b3=Button(de,text='Exit',command=exit1,width=30)
                    b3.place(x=150,y=450)
                    b3.config(font=(50))
                    de.mainloop()
                b3=Button(bank,text='Debit card',width=30,command=deb)
                b3.place(x=900,y=450)
                b3.config(font=(50))
                def logs():
                    bank.destroy()
                    l=Tk()
                    l.title('Transaction History')
                    l.geometry('1000x700')
                    flag=1
                    row1=con.execute("select * from bank_details")
                    for data1 in row1:
                        if username==str(de_code(data1[0])):
                            acc_no=int(de_code(data1[13]))
                            con.commit()
                            row=con1.execute("select * from logs")
                            for data in row:
                                if acc_no==int(de_code(data[2])):
                                       flag=0
                            con1.commit()
                    if flag==1:
                        l2=Label(l,text="No past transactions")
                        l2.place(x=500,y=300)
                        l2.config(font=(30))
                    else:
                        l3=Label(l,text='Transaction History')
                        l3.place(x=100,y=100)
                        l3.config(font=('Helvetica',20,'bold'))
                        acc1 = Frame(l)
                        acc1.place(x=200,y=150)
                        acc1_scroll = Scrollbar(acc1)
                        acc1_scroll.pack(side=RIGHT, fill=BOTH)
                        my_acc1 = ttk.Treeview(acc1,yscrollcommand=acc1_scroll.set,xscrollcommand=acc1_scroll.set,height=20)
                        my_acc1.pack()
                        acc1_scroll.config(command=my_acc1.xview)
                        acc1_scroll.config(command=my_acc1.yview)
                        my_acc1['columns'] = ('Date', 'Transaction id','Account no','Balance' ,'Note')
                        my_acc1.column("#0", width=0,  stretch=NO)
                        my_acc1.column("Date",anchor=CENTER,width=200)
                        my_acc1.column("Transaction id",anchor=CENTER,width=200)
                        my_acc1.column("Account no",anchor=CENTER,width=200)
                        my_acc1.column("Balance",anchor=CENTER,width=200)
                        my_acc1.column("Note",anchor=CENTER,width=200)
                        my_acc1.heading("#0",text="",anchor=CENTER)
                        my_acc1.heading("Date",text="Date",anchor=CENTER)
                        my_acc1.heading("Transaction id",text="Transaction id",anchor=CENTER)
                        my_acc1.heading("Account no",text="Account no",anchor=CENTER)
                        my_acc1.heading("Balance",text="Balance",anchor=CENTER)
                        my_acc1.heading("Note",text="Note",anchor=CENTER)
                        r=0
                        row=con1.execute("select * from logs")
                        for data in row:
                            if acc_no==int(de_code(data[2])):
                                my_acc1.insert(parent='',index='end',iid=r,text='',values=(str(de_code(data[0])),int(de_code(data[1])),int(de_code(data[2])),float(de_code(data[3])),str(de_code(data[4]))))
                                r=r+1
                                my_acc1.pack()
                    def exit1():
                        l.destroy()
                        dash(username)
                    b5=Button(l,text='Exit',width=20,command=exit1)
                    b5.place(x=550,y=620)
                    b5.config(font=(50))
                    l.mainloop()
                b4=Button(bank,text='Transaction History',width=30,command=logs)
                b4.place(x=900,y=540)
                b4.config(font=(50))
                def exit1():
                    bank.destroy()
                    log()
                b5=Button(bank,text='Exit',width=20,command=exit1)
                b5.place(x=550,y=620)
                b5.config(font=(50))
                def dele():
                    account_no=int(de_code(data[13]))
                    answer=tkinter.messagebox.askyesno(title='Confirmation',message='Are you sure? Do you want to delete your account?')
                    if answer:
                        de1=Tk()
                        de1.title('Delete account')
                        de1.geometry('300x200')
                        li=Label(de1,text='Enter security pin')
                        li.place(x=50,y=50)
                        li.config(font=(25))
                        e1=Entry(de1,show='*')
                        e1.place(x=80,y=100)
                        def conf():
                            if e1.get()==str(de_code(data[19])):
                                con.execute("delete from bank_details where Account_no =?",[data[13]])
                                con.commit()
                                de1.destroy()
                                bank.destroy()
                                log()
                            else:
                                tkinter.messagebox.showwarning("Warning","Incorrect password")
                                de1.destroy()
                        b1=Button(de1,text='Confirm',command=conf)
                        b1.place(x=120,y=150)
                        b1.config(font=(50))
                        de1.mainloop()
                b6=Button(bank,text='Delete my account',command=dele)
                b6.place(x=1050,y=50)
                b6.config(font=(50))
                bank.mainloop()
    def old_user():
        row=con.execute("select * from bank_details")
        flag=1
        for data in row:
            flag=0
            if str(f_obj.decrypt(data[0]).decode())==e1.get() and str(f_obj.decrypt(data[1]).decode())==e2.get():
                username=e1.get()
                login.destroy()
                dash(username)
            elif str(f_obj.decrypt(data[0]).decode())==e1.get() and str(f_obj.decrypt(data[1]).decode())!=e2.get():
                tkinter.messagebox.showwarning("Warning","Incorrect password")
                e2.delete(0,END)
        if flag==1:
             tkinter.messagebox.showwarning("Warning","Username doesn't exist")
             e1.delete(0,END)
             e2.delete(0,END)
    img2=ImageTk.PhotoImage(Image.open('login_2.JPG'))
    b1=Button(login,image=img2,command=old_user)
    b1.place(x=900,y=480)
    def forget():
        login.destroy()
        fg=Tk()
        fg.geometry("1000x700")
        fg.title("Forget password")
        l5=Label(fg,text="Answer the following questions to reset your password.")
        l5.place(x=100,y=120)
        l5.config(font=('Helvetica',20,'bold'))
        l6=Label(fg,text="Username")
        l6.place(x=100,y=200)
        l6.config(font=(15))
        e3=Entry(fg)
        e3.place(x=100,y=250,width=275,height=30)
        l7=Label(fg,text="1)What is the name of the town where you were born?")
        l7.place(x=100,y=300)
        l7.config(font=(15))
        e4=Entry(fg)
        e4.place(x=100,y=350,width=275,height=30)
        l8=Label(fg,text="2)Where was your best family vacation as a kid?")
        l8.place(x=100,y=400)
        l8.config(font=(15))
        e5=Entry(fg)
        e5.place(x=100,y=450,width=275,height=30)
        l12=Label(fg,text="3)What is the name of your first school?")
        l12.place(x=100,y=500)
        l12.config(font=(15))
        e9=Entry(fg)
        e9.place(x=100,y=550,width=275,height=30)
        def reset():
            row=con.execute("select * from bank_details")
            flag=1
            for data in row:
                if e3.get()==str(de_code(data[0])):
                    flag=0
                    if e4.get()!=str(de_code(data[10])):
                        tkinter.messagebox.showwarning("Warning","Incorrect town name")
                        e4.delete(0,END)
                    elif e5.get()!=str(de_code(data[11])):
                        tkinter.messagebox.showwarning("Warning","Incorrect family vacation")
                        e5.delete(0,END)
                    elif e9.get()!=str(de_code(data[12])):
                        tkinter.messagebox.showwarning("Warning","Incorrect school name")
                        e9.delete(0,END)
                    else:
                        fg.destroy()
                        re=Tk()
                        re.title("Reset password window")
                        re.geometry("1000x700")
                        l9=Label(re,text="Change Password")
                        l9.place(x=50,y=100)
                        l9.config(font=('Helvetica',20,'bold'))
                        l10=Label(re,text="Username")
                        l10.place(x=100,y=200)
                        l10.config(font=(15))
                        e6=Entry(re)
                        e6.place(x=100,y=250,width=275,height=30)
                        l11=Label(re,text="New Password")
                        l11.place(x=100,y=300)
                        l11.config(font=(15))
                        e7=Entry(re,show='*')
                        e7.place(x=100,y=350,width=275,height=30)
                        l13=Label(re,text="Confirm Password")
                        l13.place(x=100,y=400)
                        l13.config(font=(15))
                        e8=Entry(re,show='*')
                        e8.place(x=100,y=450,width=275,height=30)       
                        def close():
                             if len(e7.get())<10:
                                 e7.delete(0,END)
                                 e8.delete(0,END)
                                 var=StringVar()
                                 l12=Message(re,textvariable=var,relief=RAISED)
                                 var.set("*Password must be atleast 10 characters & contain atleast one number")
                                 l12.place(x=400,y=350)
                                 l12.config(font=("Times",10),fg="red",width=575)
                             elif e7.get()!=e8.get():
                                 e7.delete(0,END)
                                 e8.delete(0,END)
                                 tkinter.messagebox.showwarning("Warning","New password and confirm password must be same.")
                             else:
                                 tkinter.messagebox.showinfo("Password Changed","Your password has been changed successfully.")
                                 row=con.execute("select * from bank_details")
                                 for data in row:
                                     if e6.get()==str(de_code(data[0])):
                                         up1="update bank_details set Password =? where Username =?"
                                         ans1=(f_obj.encrypt(str(e7.get()).encode()),data[0])
                                         con.execute(up1,ans1)
                                         con.commit()
                                 re.destroy()
                                 log()
                        img10=ImageTk.PhotoImage(Image.open('resetlogo.jpg'))
                        b9=Button(re,image=img10,command=close)
                        b9.place(x=150,y=500)
                        b9.config(font=('Times',15))
                        re.mainloop() 
            if flag==1:
                 tkinter.messagebox.showwarning("Warning","Username doesn't exist")
        img9=ImageTk.PhotoImage(Image.open('continuelogo.JPG'))
        b8=Button(fg,image=img9,command=reset)
        b8.place(x=150,y=600)
        fg.mainloop()
    img3=ImageTk.PhotoImage(Image.open('forgetlogo.JPG'))
    b2=Button(login,image=img3,command=forget)
    b2.place(x=1050,y=400)
    def register():
        login.destroy()
        cre=Tk()
        cre.geometry("1000x700")
        cre.title("Registration page")
        l1=Label(cre,text="Create Account")
        l1.place(x=100,y=100)
        l1.config(font=('Helvetica',20,'bold'))
        l2=Label(cre,text="Full Name")
        l2.place(x=100,y=200)
        l2.config(font=(15))
        e1=Entry(cre)
        e1.place(x=100,y=250,width=275,height=30)
        l3=Label(cre,text="Email ID")
        l3.place(x=100,y=300)
        l3.config(font=(15))
        e2=Entry(cre)
        e2.place(x=100,y=350,width=275,height=30)
        l4=Label(cre,text="Mobile")
        l4.place(x=100,y=400)
        l4.config(font=(15))
        e3=Entry(cre)
        e3.place(x=100,y=450,width=275,height=30)
        l5=Label(cre,text="City")
        l5.place(x=100,y=500)
        l5.config(font=(15))
        e4=Entry(cre)
        e4.place(x=100,y=550,width=275,height=30)
        l6=Label(cre,text="Gender")
        l6.place(x=500,y=500)
        l6.config(font=(15))
        v1=IntVar()
        r1=Radiobutton(cre,text="Male",variable=v1,value=1)
        r1.place(x=600,y=500)
        r1.config(font=(15))
        r2=Radiobutton(cre,text="Female",variable=v1,value=2)
        r2.place(x=700,y=500)
        r2.config(font=(15))
        r3=Radiobutton(cre,text="Others",variable=v1,value=3)
        r3.place(x=800,y=500)
        r3.config(font=(15))
        l7=Label(cre,text="Date of birth")
        l7.place(x=500,y=550)
        l7.config(font=(15))
        s1=Spinbox(cre,from_=1,to=31)
        s1.place(x=600,y=550)
        s1.config(font=(15))
        s2=Spinbox(cre,from_=1,to=12)
        s2.place(x=850,y=550)
        s2.config(font=(15))
        s3=Spinbox(cre,from_=1920,to=2004)
        s3.place(x=1100,y=550)
        s3.config(font=(15))
        l8=Label(cre,text="Username")
        l8.place(x=500,y=200)
        l8.config(font=(15))
        e5=Entry(cre)
        e5.place(x=500,y=250,width=275,height=30)
        l9=Label(cre,text="Password")
        l9.place(x=500,y=300)
        l9.config(font=(15))
        e6=Entry(cre,show='*')
        e6.place(x=500,y=350,width=275,height=30)
        l10=Label(cre,text="Initial Balance")
        l10.place(x=500,y=400)
        l10.config(font=(15))
        e7=Entry(cre)
        e7.place(x=500,y=450,width=275,height=30)
        l11=Label(cre,text="Name of birth city")
        l11.place(x=900,y=200)
        l11.config(font=(15))
        e8=Entry(cre)

        e8.place(x=900,y=250,width=275,height=30)
        l12=Label(cre,text="Name of best family vacation city")
        l12.place(x=900,y=300)
        l12.config(font=(15))
        e9=Entry(cre)
        e9.place(x=900,y=350,width=275,height=30)
        l13=Label(cre,text="Name of first school")
        l13.place(x=900,y=400)
        l13.config(font=(15))
        e10=Entry(cre)
        e10.place(x=900,y=450,width=275,height=30)
        def rescale_image(image, percent):
            width = int(image.shape[1] * percent/ 100)
            height = int(image.shape[0] * percent/ 100)
            dim = (width, height)
            return resize(image, dim, interpolation =INTER_AREA)
        def photo(acc_no):
            acc_no=str(acc_no)
            acc_no1=acc_no+'.png'
            cam = VideoCapture(0)
            result, image = cam.read()
            image25 = rescale_image(image,25)
            if result:
                    imshow(acc_no, image25)
                    imwrite(acc_no1, image25)
                    waitKey(0)
                    destroyWindow(acc_no)     
            else:
            	print("No image detected. Please! try again")
        
        
        def submit():
            flag=1
            row=con.execute("select * from bank_details where Username=? ",[e5.get()])
            for data in row:
                if e5.get()==str(de_code(data[0])):
                    flag=0
            if flag==0:
                e5.delete(0,END)
                tkinter.messagebox.showwarning("Warning","Username already exist")                
            elif len(e6.get())<10:
                var1=StringVar()
                l14=Message(cre,textvariable=var1,relief=RAISED)                
                e6.delete(0,END)
                var1.set("*Password must be atleast 10 characters & contain atleast one number")
                l14.place(x=500,y=380)
                l14.config(fg="red",width=575,bg='white')
            elif date.today().year-int(s3.get())<18:
                tkinter.messagebox.showwarning("Warning","You are not eligible for creating an account")
                cre.destroy()
                log()
            else:
                acc_no=456800000000 + randint(1000,9999)
                photo(acc_no)
                gen=""
                if v1.get()==1:
                    gen="Male"
                elif v1.get()==2:
                    gen="Female"
                elif v1.get()==3:
                    gen="Others"
                deb=randint(1000000000000000,9999999999999999)
                cvv=randint(100,999)
                amt=200000
                security_pin=randint(1000,9999)
                query="insert into bank_details(Username,Password,Full_name,Email_id,Contact_no,City,Gender,Date,Month,Year,town,vacation,school,Account_no,balance,Debit_card_no,cvv_no,status,card_limit,security_pin) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
                ans=(f_obj.encrypt(e5.get().encode()),f_obj.encrypt(e6.get().encode()),f_obj.encrypt(e1.get().encode()),f_obj.encrypt(e2.get().encode()),f_obj.encrypt(e3.get().encode()),f_obj.encrypt(e4.get().encode()),f_obj.encrypt(gen.encode()),f_obj.encrypt(s1.get().encode()),f_obj.encrypt(s2.get().encode()),f_obj.encrypt(s3.get().encode()),f_obj.encrypt(e8.get().encode()),f_obj.encrypt(e9.get().encode()),f_obj.encrypt(e10.get().encode()),f_obj.encrypt(str(acc_no).encode()),f_obj.encrypt(e7.get().encode()),f_obj.encrypt(str(deb).encode()),f_obj.encrypt(str(cvv).encode()),f_obj.encrypt('unblock'.encode()),f_obj.encrypt(str(amt).encode()),f_obj.encrypt(str(security_pin).encode()))
                print(type(f_obj.encrypt(e5.get().encode())))
                con.execute(query,ans)
                con.commit()
                msg="Your account has been created.\nAccount No. :"+str(acc_no)+'\nDebit card No. :'+str(deb)+'\nCVV :'+str(cvv)+'\nSecurity pin No. :'+str(security_pin)
                tkinter.messagebox.showinfo("Account Credentials",msg)
                cre.destroy()
                log()
        b1=Button(cre,text='Submit',command=submit)
        b1.place(x=600,y=600)
        b1.config(font=(50))
        def back():
            cre.destroy()
            log()
        b2=Button(cre,text='Back',command=back)
        b2.place(x=50,y=600)
        b2.config(font=(50))
        cre.mainloop()
    img4=ImageTk.PhotoImage(Image.open('registerlogo.JPG'))
    b3=Button(login,image=img4,command=register)
    b3.place(x=100,y=600)
    img5=ImageTk.PhotoImage(Image.open('contactuslogo.jpg'))
    b4=Label(login,text="Contact us: 9500895971")
    b4.place(x=350,y=620)
    b4.config(font=(50))
    def ex():
        tkinter.messagebox.showinfo("Thank you","Thank you for using our application ")
        login.destroy()
    img7=ImageTk.PhotoImage(Image.open('exitlogo.JPG'))
    b6=Button(login,image=img7,command=ex)
    b6.place(x=1200,y=620)
    def admin_login():
        ad=Tk()
        ad.title('Admin login')
        ad.geometry('300x200')
        li=Label(ad,text='Enter admin login password')
        li.place(x=50,y=50)
        li.config(font=(25))
        e1=Entry(ad,show='*')
        e1.place(x=80,y=100)
        def admin():
            adm=Tk()
            adm.title('Admin page')
            adm.geometry('1200x800')
            img0 = ImageTk.PhotoImage(Image.open('admin.png'))
            label_1 = Label(adm, image = img0)
            label_1.place(x=100,y=50)
            l1=Label(adm,text='Admin')
            l1.place(x=300,y=150)
            l1.config(font=('Helvetica',30,'bold'))
            row=con.execute("select * from bank_details")
            flag=1
            for data in row:
                flag=0
            if flag==1:
                l2=Label(adm,text="No Accounts")
                l2.place(x=500,y=300)
                l2.config(font=(30))
            else:
                l3=Label(adm,text='Accounts')
                l3.place(x=100,y=300)
                l3.config(font=('Helvetica',20,'bold'))
                acc1 = Frame(adm)
                acc1.place(x=200,y=400)
                acc1_scroll = Scrollbar(acc1)
                acc1_scroll.pack(side=RIGHT, fill=Y)
                acc1_scroll = Scrollbar(acc1,orient='horizontal')
                acc1_scroll.pack(side= BOTTOM,fill=X)
                my_acc1 = ttk.Treeview(acc1,yscrollcommand=acc1_scroll.set,xscrollcommand=acc1_scroll.set)
                my_acc1.pack()
                acc1_scroll.config(command=my_acc1.yview)
                acc1_scroll.config(command=my_acc1.xview)
                my_acc1['columns'] = ('Name', 'Account no','Balance','Email id','Contact','Gender')
                my_acc1.column("#0", width=0,  stretch=NO)
                my_acc1.column("Name",anchor=CENTER,width=180)
                my_acc1.column("Account no",anchor=CENTER,width=180)
                my_acc1.column("Balance",anchor=CENTER,width=180)
                my_acc1.column("Email id",anchor=CENTER,width=180)
                my_acc1.column("Contact",anchor=CENTER,width=180)
                my_acc1.column("Gender",anchor=CENTER,width=180)
                my_acc1.heading("#0",text="",anchor=CENTER)
                my_acc1.heading("Name",text="Name",anchor=CENTER)
                my_acc1.heading("Account no",text="Account no",anchor=CENTER)
                my_acc1.heading("Balance",text="Balance",anchor=CENTER)
                my_acc1.heading("Email id",text="Email id",anchor=CENTER)
                my_acc1.heading("Contact",text="Contact",anchor=CENTER)
                my_acc1.heading("Gender",text="Gender",anchor=CENTER)
                r=0
                row=con.execute("select * from bank_details")
                for data in row:
                    my_acc1.insert(parent='',index='end',iid=r,text='',values=(str(de_code(data[2])),int(de_code(data[13])),float(de_code(data[14])),str(de_code(data[3])),int(de_code(data[4])),str(de_code(data[6]))))
                    r=r+1
                my_acc1.pack()
            def logss():
                adm.destroy()
                l=Tk()
                l.title('LOGS')
                l.geometry('1000x700')
                flag=1
                row=con1.execute("select * from logs")
                for data in row:
                    flag=0
                if flag==1:
                    l2=Label(l,text="No LOGS found")
                    l2.place(x=500,y=300)
                    l2.config(font=(30))
                else:
                    l3=Label(l,text='LOGS')
                    l3.place(x=100,y=100)
                    l3.config(font=('Helvetica',20,'bold'))
                    acc1 = Frame(l)
                    acc1.place(x=200,y=150)
                    acc1_scroll = Scrollbar(acc1)
                    acc1_scroll.pack(side=RIGHT, fill=BOTH)
                    my_acc1 = ttk.Treeview(acc1,yscrollcommand=acc1_scroll.set,xscrollcommand=acc1_scroll.set,height=20)
                    my_acc1.pack()
                    acc1_scroll.config(command=my_acc1.xview)
                    acc1_scroll.config(command=my_acc1.yview)
                    my_acc1['columns'] = ('Date', 'Transaction id','Account no','Balance' ,'Note')
                    my_acc1.column("#0", width=0,  stretch=NO)
                    my_acc1.column("Date",anchor=CENTER,width=200)
                    my_acc1.column("Transaction id",anchor=CENTER,width=200)
                    my_acc1.column("Account no",anchor=CENTER,width=200)
                    my_acc1.column("Balance",anchor=CENTER,width=200)
                    my_acc1.column("Note",anchor=CENTER,width=200)
                    my_acc1.heading("#0",text="",anchor=CENTER)
                    my_acc1.heading("Date",text="Date",anchor=CENTER)

                    my_acc1.heading("Transaction id",text="Transaction id",anchor=CENTER)
                    my_acc1.heading("Account no",text="Account no",anchor=CENTER)
                    my_acc1.heading("Balance",text="Balance",anchor=CENTER)
                    my_acc1.heading("Note",text="Note",anchor=CENTER)
                    r=0
                    row=con1.execute("select * from logs")
                    for data in row:
                        my_acc1.insert(parent='',index='end',iid=r,text='',values=(str(de_code(data[0])),int(de_code(data[1])),int(de_code(data[2])),float(de_code(data[3])),str(de_code(data[4]))))
                        r=r+1
                    my_acc1.pack()
                def exit1():
                    l.destroy()
                    admin()
                b5=Button(l,text='Exit',width=20,command=exit1)
                b5.place(x=550,y=620)
                b5.config(font=(50))
                l.mainloop()
            b1=Button(adm,text='LOGS',command=logss)
            b1.place(x=1050,y=100)
            b1.config(font=(50))
            def exit2():
                adm.destroy()
                log()
            b2=Button(adm,text='Exit',command=exit2)
            b2.place(x=600,y=650)
            b2.config(font=(50))
            adm.mainloop()
        def a():
            if e1.get()=='!#%&()*^$@':
                ad.destroy()
                login.destroy()
                admin()
            else:
                tkinter.messagebox.showwarning("Warning","Incorrect password")
                e1.delete(0,END)
        b1=Button(ad,text='login',command=a)
        b1.place(x=130,y=150)
        b1.config(font=(50))
        ad.mainloop()
    b7=Button(login,text='ADMIN',command=admin_login)
    b7.place(x=1200,y=50)
    b7.config(font=(50))
    login.mainloop()
    

con=sqlite3.connect("bank_details.db")
con1=sqlite3.connect("logs.db")    
log()